$OpenBSD: patch-src_tools_cargo_src_cargo_core_compiler_context_compilation_files_rs,v 1.11 2020/03/21 05:23:59 semarie Exp $
For port tree, use a custom metadata generation method to have stable hash between archs.
Use an environment variable to use alternate method.

Index: src/tools/cargo/src/cargo/core/compiler/context/compilation_files.rs
--- src/tools/cargo/src/cargo/core/compiler/context/compilation_files.rs.orig
+++ src/tools/cargo/src/cargo/core/compiler/context/compilation_files.rs
@@ -564,6 +564,37 @@ fn compute_metadata<'a, 'cfg>(
 
     let mut hasher = SipHasher::new();
 
+    // Simplified version for OpenBSD port tree
+    if let Ok(port_version) = env::var("OPENBSD_PORTS_LANG_RUST_VERSION") {
+        port_version.hash(&mut hasher);
+
+        format!("{}", unit.pkg.package_id().name()).hash(&mut hasher);
+        format!("{}", unit.pkg.package_id().version()).hash(&mut hasher);
+
+        let mut deps_metadata = cx
+            .unit_deps(unit)
+            .iter()
+            .map(|dep| metadata_of(&dep.unit, cx, metas))
+            .collect::<Vec<_>>();
+        deps_metadata.sort();
+        deps_metadata.hash(&mut hasher);
+
+        unit.features.hash(&mut hasher);
+        unit.kind.hash(&mut hasher);
+        if cx.is_primary_package(unit) {
+            if let Some(proc) = &cx.bcx.build_config.primary_unit_rustc {
+                proc.get_program().hash(&mut hasher);
+            }
+        }
+        unit.is_std.hash(&mut hasher);
+
+        if let Ok(ref channel) = __cargo_default_lib_metadata {
+            channel.hash(&mut hasher);
+        }
+
+        return Some(Metadata(hasher.finish()));
+    }
+
     // This is a generic version number that can be changed to make
     // backwards-incompatible changes to any file structures in the output
     // directory. For example, the fingerprint files or the build-script
