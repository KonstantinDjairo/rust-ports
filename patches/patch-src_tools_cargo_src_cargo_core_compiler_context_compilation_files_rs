$OpenBSD: patch-src_tools_cargo_src_cargo_core_compiler_context_compilation_files_rs,v 1.3 2019/04/17 06:55:59 semarie Exp $
Try to be more clever with rustc binary to avoid too much free raising dice on PLIST.
Use an environment variable to override the verbose_version from rustc with choosen string.

Index: src/tools/cargo/src/cargo/core/compiler/context/compilation_files.rs
--- src/tools/cargo/src/cargo/core/compiler/context/compilation_files.rs.orig
+++ src/tools/cargo/src/cargo/core/compiler/context/compilation_files.rs
@@ -455,10 +455,16 @@ fn compute_metadata<'a, 'cfg>(
 
     // Unique metadata per (name, source, version) triple. This'll allow us
     // to pull crates from anywhere without worrying about conflicts.
-    unit.pkg
-        .package_id()
-        .stable_hash(bcx.ws.root())
-        .hash(&mut hasher);
+    if let Ok(_) = env::var("OPENBSD_PORTS_LANG_RUST_VERSION") {
+        // stable_hash on source isn't stable
+        unit.pkg.package_id().name().hash(&mut hasher);
+        unit.pkg.package_id().version().hash(&mut hasher);
+    } else {
+        unit.pkg
+            .package_id()
+            .stable_hash(bcx.ws.root())
+            .hash(&mut hasher);
+    }
 
     // Add package properties which map to environment variables
     // exposed by Cargo.
@@ -512,7 +518,11 @@ fn compute_metadata<'a, 'cfg>(
     unit.target.name().hash(&mut hasher);
     unit.target.kind().hash(&mut hasher);
 
-    bcx.rustc.verbose_version.hash(&mut hasher);
+    if let Ok(port_version) = env::var("OPENBSD_PORTS_LANG_RUST_VERSION") {
+        port_version.hash(&mut hasher);
+    } else {
+        bcx.rustc.verbose_version.hash(&mut hasher);
+    }
 
     // Seed the contents of `__CARGO_DEFAULT_LIB_METADATA` to the hasher if present.
     // This should be the release channel, to get a different hash for each channel.
